import colorsys

import numpy as np

__all__ = [
    'Device',
]


class Device:
    """
    Generic class for devices
    """
    color_temperature_map = {  # got this dict from somewhere but forgot where specifically :3
        1000: [1.0, 0.2196078431372549, 0.0],
        1100: [1.0, 0.2784313725490196, 0.0],
        1200: [1.0, 0.3254901960784314, 0.0],
        1300: [1.0, 0.36470588235294116, 0.0],
        1400: [1.0, 0.396078431372549, 0.0],
        1500: [1.0, 0.42745098039215684, 0.0],
        1600: [1.0, 0.45098039215686275, 0.0],
        1700: [1.0, 0.4745098039215686, 0.0],
        1800: [1.0, 0.49411764705882355, 0.0],
        1900: [1.0, 0.5137254901960784, 0.0],
        2000: [1.0, 0.5411764705882353, 0.07058823529411765],
        2100: [1.0, 0.5568627450980392, 0.12941176470588237],
        2200: [1.0, 0.5764705882352941, 0.17254901960784313],
        2300: [1.0, 0.596078431372549, 0.21176470588235294],
        2400: [1.0, 0.615686274509804, 0.24705882352941178],
        2500: [1.0, 0.6313725490196078, 0.2823529411764706],
        2600: [1.0, 0.6470588235294118, 0.30980392156862746],
        2700: [1.0, 0.6627450980392157, 0.3411764705882353],
        2800: [1.0, 0.6784313725490196, 0.3686274509803922],
        2900: [1.0, 0.6941176470588235, 0.396078431372549],
        3000: [1.0, 0.7058823529411765, 0.4196078431372549],
        3100: [1.0, 0.7215686274509804, 0.4470588235294118],
        3200: [1.0, 0.7333333333333333, 0.47058823529411764],
        3300: [1.0, 0.7450980392156863, 0.49411764705882355],
        3400: [1.0, 0.7568627450980392, 0.5176470588235295],
        3500: [1.0, 0.7686274509803922, 0.5372549019607843],
        3600: [1.0, 0.7803921568627451, 0.5607843137254902],
        3700: [1.0, 0.788235294117647, 0.5803921568627451],
        3800: [1.0, 0.8, 0.6],
        3900: [1.0, 0.807843137254902, 0.6235294117647059],
        4000: [1.0, 0.8196078431372549, 0.6392156862745098],
        4100: [1.0, 0.8274509803921568, 0.6588235294117647],
        4200: [1.0, 0.8352941176470589, 0.6784313725490196],
        4300: [1.0, 0.8431372549019608, 0.6941176470588235],
        4400: [1.0, 0.8509803921568627, 0.7137254901960784],
        4500: [1.0, 0.8588235294117647, 0.7294117647058823],
        4600: [1.0, 0.8666666666666667, 0.7450980392156863],
        4700: [1.0, 0.8745098039215686, 0.7607843137254902],
        4800: [1.0, 0.8823529411764706, 0.7764705882352941],
        4900: [1.0, 0.8901960784313725, 0.792156862745098],
        5000: [1.0, 0.8941176470588236, 0.807843137254902],
        5100: [1.0, 0.9019607843137255, 0.8235294117647058],
        5200: [1.0, 0.9098039215686274, 0.8352941176470589],
        5300: [1.0, 0.9137254901960784, 0.8509803921568627],
        5400: [1.0, 0.9215686274509803, 0.8627450980392157],
        5500: [1.0, 0.9254901960784314, 0.8784313725490196],
        5600: [1.0, 0.9333333333333333, 0.8901960784313725],
        5700: [1.0, 0.9372549019607843, 0.9019607843137255],
        5800: [1.0, 0.9411764705882353, 0.9137254901960784],
        5900: [1.0, 0.9490196078431372, 0.9254901960784314],
        6000: [1.0, 0.9529411764705882, 0.9372549019607843],
        6100: [1.0, 0.9568627450980393, 0.9490196078431372],
        6200: [1.0, 0.9607843137254902, 0.9607843137254902],
        6300: [1.0, 0.9647058823529412, 0.9686274509803922],
        6400: [1.0, 0.9725490196078431, 0.984313725490196],
        6500: [1.0, 0.9764705882352941, 0.9921568627450981],
        6600: [0.996078431372549, 0.9764705882352941, 1.0],
        6700: [0.9882352941176471, 0.9686274509803922, 1.0],
        6800: [0.9764705882352941, 0.9647058823529412, 1.0],
        6900: [0.9686274509803922, 0.9607843137254902, 1.0],
        7000: [0.9607843137254902, 0.9529411764705882, 1.0],
        7100: [0.9529411764705882, 0.9490196078431372, 1.0],
        7200: [0.9411764705882353, 0.9450980392156862, 1.0],
        7300: [0.9372549019607843, 0.9411764705882353, 1.0],
        7400: [0.9294117647058824, 0.9372549019607843, 1.0],
        7500: [0.9215686274509803, 0.9333333333333333, 1.0],
        7600: [0.9137254901960784, 0.9294117647058824, 1.0],
        7700: [0.9058823529411765, 0.9254901960784314, 1.0],
        7800: [0.9019607843137255, 0.9215686274509803, 1.0],
        7900: [0.8941176470588236, 0.9176470588235294, 1.0],
        8000: [0.8901960784313725, 0.9137254901960784, 1.0],
        8100: [0.8823529411764706, 0.9098039215686274, 1.0],
        8200: [0.8784313725490196, 0.9058823529411765, 1.0],
        8300: [0.8705882352941177, 0.9019607843137255, 1.0],
        8400: [0.8666666666666667, 0.9019607843137255, 1.0],
        8500: [0.8627450980392157, 0.8980392156862745, 1.0],
        8600: [0.8549019607843137, 0.8980392156862745, 1.0],
        8700: [0.8509803921568627, 0.8901960784313725, 1.0],
        8800: [0.8470588235294118, 0.8901960784313725, 1.0],
        8900: [0.8431372549019608, 0.8862745098039215, 1.0],
        9000: [0.8392156862745098, 0.8823529411764706, 1.0],
        9100: [0.8313725490196079, 0.8823529411764706, 1.0],
        9200: [0.8274509803921568, 0.8784313725490196, 1.0],
        9300: [0.8235294117647058, 0.8745098039215686, 1.0],
        9400: [0.8196078431372549, 0.8745098039215686, 1.0],
        9500: [0.8156862745098039, 0.8705882352941177, 1.0],
        9600: [0.8117647058823529, 0.8666666666666667, 1.0],
        9700: [0.8117647058823529, 0.8666666666666667, 1.0],
        9800: [0.807843137254902, 0.8627450980392157, 1.0],
        9900: [0.803921568627451, 0.8627450980392157, 1.0],
        10000: [0.8117647058823529, 0.8549019607843137, 1.0],
        10100: [0.8117647058823529, 0.8549019607843137, 1.0],
        10200: [0.807843137254902, 0.8509803921568627, 1.0],
        10300: [0.803921568627451, 0.8509803921568627, 1.0],
        10400: [0.8, 0.8470588235294118, 1.0],
        10500: [0.8, 0.8470588235294118, 1.0],
        10600: [0.796078431372549, 0.8431372549019608, 1.0],
        10700: [0.792156862745098, 0.8431372549019608, 1.0],
        10800: [0.792156862745098, 0.8392156862745098, 1.0],
        10900: [0.788235294117647, 0.8392156862745098, 1.0],
        11000: [0.7843137254901961, 0.8352941176470589, 1.0],
        11100: [0.7843137254901961, 0.8352941176470589, 1.0],
        11200: [0.7803921568627451, 0.8313725490196079, 1.0],
        11300: [0.7764705882352941, 0.8313725490196079, 1.0],
        11400: [0.7764705882352941, 0.8313725490196079, 1.0],
        11500: [0.7725490196078432, 0.8274509803921568, 1.0],
        11600: [0.7725490196078432, 0.8274509803921568, 1.0],
        11700: [0.7725490196078432, 0.8235294117647058, 1.0],
        11800: [0.7686274509803922, 0.8235294117647058, 1.0],
        11900: [0.7647058823529411, 0.8235294117647058, 1.0],
        12000: [0.7647058823529411, 0.8196078431372549, 1.0]
    }

    def __init__(self, device, name, *args, **kwargs):
        """
        common attributes
        """
        self.name = name
        self.enabled = device.get('enabled')

        self.brightness = device.get('brightness', 1)
        self.non_linear_brightness = device.get('non_linear_brightness', True)
        self.flip = device.get('flip')
        self.leds = device.get('leds', 1)
        self.saturation = device.get('saturation', 1)
        self.color_temperature = self.get_color_temperature(device.get('color_temperature'))

    def get_color_temperature(self, value):
        """
        takes an input value and rounds it to the nearest 100 value, checks if it is within bounds and uses that
        otherwise just returns [1.0, 1.0, 1.0] which means no temperature setting
        """
        default = [1.0, 1.0, 1.0]

        if type(value) not in (str, int):
            return default
        try:
            key = round(int(value), -2)
        except ValueError:
            return default

        return self.color_temperature_map.get(key, default)

    def apply_enhancements(self, data):
        """
        adjusts the saturation of input data
        """

        if self.non_linear_brightness:
            new_values = np.array([colorsys.rgb_to_hsv(*value) for value in data]) ** [1, 1, 2]
            new_values = new_values * [1, self.saturation, 0.00390625]
        else:
            new_values = np.array([colorsys.rgb_to_hsv(*value) for value in data]) * [1, self.saturation, 1]

        return np.array([colorsys.hsv_to_rgb(*value) for value in new_values]).clip(0, 255)

    def loop(self, data):
        """
        Function that will be repeatedly called by a threadloop.
        It should do the necessary work to get the device to display the sent data.

        :param data: 2d array containing a list of rgb values for the target device
        """
        pass

    def __str__(self):
        return self.name
